{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst {\n  Pool\n} = require('pg');\nconst pool = new Pool({\n  user: 'postgres',\n  host: 'database-1.clmee66q0sxg.us-east-1.rds.amazonaws.com',\n  database: 'postgres',\n  password: 'hospital',\n  port: '5432'\n});\nconsole.log('Connected to PostgreSQL database successfully!');\nconst app = express();\napp.use(cors({\n  origin: 'http://localhost:3000'\n}));\napp.use(express.json());\n\n// Endpoint to register a patient\napp.post('/register', async (req, res) => {\n  const {\n    name,\n    dob,\n    phoneNumber,\n    email,\n    gender,\n    departmentId\n  } = req.body;\n  try {\n    // Construct the name of the department-specific table based on departmentId\n    const departmentTable = `${departmentId}_patients`; // Assuming your tables follow this naming convention\n\n    // Insert data into the department-specific table\n    await pool.query(`INSERT INTO ${departmentTable} (name, dob, phonenumber, email, gender) VALUES ($1, $2, $3, $4, $5)`, [name, dob, phoneNumber, email, gender]);\n    res.status(201).json({\n      message: 'Patient registered successfully'\n    });\n  } catch (error) {\n    console.error('Error registering patient:', error);\n    res.status(500).json({\n      message: 'Failed to register patient'\n    });\n  }\n});\n\n// Endpoint to fetch departments\napp.get('/departments', async (req, res) => {\n  try {\n    const {\n      rows\n    } = await pool.query('SELECT departmentid, name FROM departments');\n    res.json(rows);\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    res.status(500).json({\n      message: 'Failed to fetch departments'\n    });\n  }\n});\n\n// Endpoint to fetch patients by department\napp.get('/patients/:departmentId', async (req, res) => {\n  const departmentId = req.params.departmentId;\n  try {\n    // Construct the name of the department-specific table based on departmentId\n    const departmentTable = `${departmentId}_patients`;\n\n    // Fetch patients from the department-specific table\n    const {\n      rows\n    } = await pool.query(`SELECT * FROM ${departmentTable}`);\n    res.json(rows);\n  } catch (error) {\n    console.error(`Error fetching patients for department ${departmentId}:`, error);\n    res.status(500).json({\n      message: `Failed to fetch patients for department ${departmentId}`\n    });\n  }\n});\n\n// Endpoint to update patient status\napp.put('/patients/:departmentId/:patientId/status', async (req, res) => {\n  const {\n    departmentId,\n    patientId\n  } = req.params;\n  const {\n    status\n  } = req.body;\n  try {\n    // Construct the name of the department-specific table based on departmentId\n    const departmentTable = `${departmentId}_patients`;\n\n    // Update the status of the patient in the department-specific table\n    await pool.query(`UPDATE ${departmentTable} SET status = $1 WHERE id = $2`, [status, patientId]);\n    res.json({\n      message: 'Patient status updated successfully'\n    });\n  } catch (error) {\n    console.error(`Error updating status for patient ${patientId} in department ${departmentId}:`, error);\n    res.status(500).json({\n      message: `Failed to update patient status for patient ${patientId} in department ${departmentId}`\n    });\n  }\n});\napp.listen(3005, () => {\n  console.log('Server listening on port 3005!');\n});","map":{"version":3,"names":["express","require","cors","Pool","pool","user","host","database","password","port","console","log","app","use","origin","json","post","req","res","name","dob","phoneNumber","email","gender","departmentId","body","departmentTable","query","status","message","error","get","rows","params","put","patientId","listen"],"sources":["E:/hospital_main/src/DoctorLogin.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst { Pool } = require('pg');\r\n\r\nconst pool = new Pool({\r\n  user: 'postgres',\r\n  host: 'database-1.clmee66q0sxg.us-east-1.rds.amazonaws.com',\r\n  database: 'postgres',\r\n  password: 'hospital',\r\n  port: '5432',\r\n});\r\n\r\nconsole.log('Connected to PostgreSQL database successfully!');\r\n\r\nconst app = express();\r\n\r\napp.use(cors({ origin: 'http://localhost:3000' }));\r\napp.use(express.json());\r\n\r\n// Endpoint to register a patient\r\napp.post('/register', async (req, res) => {\r\n  const { name, dob, phoneNumber, email, gender, departmentId } = req.body;\r\n\r\n  try {\r\n    // Construct the name of the department-specific table based on departmentId\r\n    const departmentTable = `${departmentId}_patients`; // Assuming your tables follow this naming convention\r\n    \r\n    // Insert data into the department-specific table\r\n    await pool.query(`INSERT INTO ${departmentTable} (name, dob, phonenumber, email, gender) VALUES ($1, $2, $3, $4, $5)`,\r\n      [name, dob, phoneNumber, email, gender]);\r\n\r\n    res.status(201).json({ message: 'Patient registered successfully' });\r\n  } catch (error) {\r\n    console.error('Error registering patient:', error);\r\n    res.status(500).json({ message: 'Failed to register patient' });\r\n  }\r\n});\r\n\r\n// Endpoint to fetch departments\r\napp.get('/departments', async (req, res) => {\r\n  try {\r\n    const { rows } = await pool.query('SELECT departmentid, name FROM departments');\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error('Error fetching departments:', error);\r\n    res.status(500).json({ message: 'Failed to fetch departments' });\r\n  }\r\n});\r\n\r\n// Endpoint to fetch patients by department\r\napp.get('/patients/:departmentId', async (req, res) => {\r\n  const departmentId = req.params.departmentId;\r\n\r\n  try {\r\n    // Construct the name of the department-specific table based on departmentId\r\n    const departmentTable = `${departmentId}_patients`;\r\n\r\n    // Fetch patients from the department-specific table\r\n    const { rows } = await pool.query(`SELECT * FROM ${departmentTable}`);\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error(`Error fetching patients for department ${departmentId}:`, error);\r\n    res.status(500).json({ message: `Failed to fetch patients for department ${departmentId}` });\r\n  }\r\n});\r\n\r\n// Endpoint to update patient status\r\napp.put('/patients/:departmentId/:patientId/status', async (req, res) => {\r\n  const { departmentId, patientId } = req.params;\r\n  const { status } = req.body;\r\n\r\n  try {\r\n    // Construct the name of the department-specific table based on departmentId\r\n    const departmentTable = `${departmentId}_patients`;\r\n\r\n    // Update the status of the patient in the department-specific table\r\n    await pool.query(`UPDATE ${departmentTable} SET status = $1 WHERE id = $2`, [status, patientId]);\r\n\r\n    res.json({ message: 'Patient status updated successfully' });\r\n  } catch (error) {\r\n    console.error(`Error updating status for patient ${patientId} in department ${departmentId}:`, error);\r\n    res.status(500).json({ message: `Failed to update patient status for patient ${patientId} in department ${departmentId}` });\r\n  }\r\n});\r\n\r\napp.listen(3005, () => {\r\n  console.log('Server listening on port 3005!');\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}